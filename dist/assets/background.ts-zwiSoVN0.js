chrome.runtime.onMessage.addListener((t,r,o)=>{if(t.action==="createSurvey")return console.log("createSurvey message received in background"),f(t).then(e=>o(e)).catch(e=>o({success:!1,error:e.message})),!0;if(t.action==="deleteSurvey")return h(t.surveyId).then(e=>o(e)).catch(e=>o({success:!1,error:e.message})),!0;if(t.action==="checkIfSurveyExists")return u(t.eventId).then(e=>o(e)).catch(e=>o({success:!1,error:e.message})),!0});async function u(t){try{const r=await i();return{success:!0,surveyId:await l(r,t)}}catch(r){throw console.error("Error searching for file:",r),r}}async function h(t){try{const r=await i();return await d(r,t),{success:!0}}catch(r){throw console.error("Error trashing form:",r),r}}async function l(t,r){const o=await fetch(`https://www.googleapis.com/drive/v3/files?q=name='${r}' and trashed=false`,{method:"GET",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"}});if(!o.ok){const n=await o.text();throw console.log(n),new Error(`Failed to trash form: ${n}`)}const e=await o.json();if(e.files&&e.files.length>0)return e.files[0].id;throw new Error(`No file found with the name: ${r}`)}async function d(t,r){const o=await fetch(`https://www.googleapis.com/drive/v2/files/${r}/trash`,{method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"}});if(!o.ok){const e=await o.text();throw console.log(e),new Error(`Failed to trash form: ${e}`)}}async function f(t){const{eventId:r,eventTitle:o}=t;try{const e=await i(),n=await m(e,o,r);console.log("Survey created with ID:",n.formId);const s=n.formId,a=n.responderUri;return{success:!0,surveyId:s,responderUri:a}}catch(e){throw console.error("Error:",e),e}}function i(){return new Promise((t,r)=>{chrome.identity.getAuthToken({interactive:!0},function(o){var e;chrome.runtime.lastError||!o?r(new Error(((e=chrome.runtime.lastError)==null?void 0:e.message)??"Authentication failed")):t(o)})})}async function m(t,r,o){const s=await c("https://forms.googleapis.com/v1/forms",{method:"POST",body:JSON.stringify({info:{title:"Quick Meeting Feedback",documentTitle:o}})},t);if(!s.formId)throw new Error("Failed to create survey: No formId returned");const a={includeFormInResponse:!0,requests:[{createItem:{item:{title:"Would you go to a meeting like that again?",questionItem:{question:{required:!0,scaleQuestion:{low:0,high:2,lowLabel:"Not worth it",highLabel:"Absolutely"}}}},location:{index:0}}},{updateFormInfo:{info:{description:`Feedback survey for the "${r}" meeting`},updateMask:"description"}}]};return(await c(`https://forms.googleapis.com/v1/forms/${s.formId}:batchUpdate`,{method:"POST",body:JSON.stringify(a)},t)).form}async function c(t,r,o){const e=await fetch(t,{...r,headers:{...r.headers,Authorization:`Bearer ${o}`,"Content-Type":"application/json"}});if(!e.ok){const n=await e.json();throw new Error(`API request failed: ${n.error.message}`)}return e.json()}
